<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd 
       http://www.springframework.org/schema/mvc 
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/websocket 
    http://www.springframework.org/schema/websocket/spring-websocket.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <context:component-scan base-package="com.imm"/>
    <!--配置文件加载开始-->
    <bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true" />
        <property name="locations">
            <list>
                <value>classpath*:properties/redis.properties</value>
                <value>classpath*:properties/jdbc.properties</value>
                <value>classpath*:properties/coreserver.properties</value>
                <value>classpath*:properties/log4j2.properties</value>
                <value>classpath*:properties/mq.properties</value>
            </list>
        </property>
    </bean>
    <!--配置文件加载结束-->

    <!--拦截器开始-->
    <!--<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/*.htm" />
            <mvc:exclude-mapping path="/login.htm"/>
            <mvc:exclude-mapping path="/login_view.htm"/>
            <bean class="com.money.interceptor.LoginInterceptor">
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>-->
    <!--拦截器结束-->

    <!-- websocket消息处理bean -->
    <bean id="chatWebSocketHandler" class="com.imm.websocket.handler.ChatWebSocketHandler"/>
    <websocket:handlers allowed-origins="*">
        <websocket:mapping path="/connection.htm" handler="chatWebSocketHandler"/>
        <websocket:handshake-interceptors>
            <bean class="com.imm.websocket.interceptor.WebSocketHandshakeInterceptor"/>
        </websocket:handshake-interceptors>
    </websocket:handlers>

    <bean class="org.springframework.web.socket.server.standard.ServletServerContainerFactoryBean">
        <property name="maxTextMessageBufferSize" value="8192"/>
        <property name="maxBinaryMessageBufferSize" value="8192"/>
    </bean>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize">
            <value>10485760</value>
            <!-- 文件上传最大为10M -->
        </property>
        <property name="maxInMemorySize" value="4096"/>
    </bean>

    <!--持久化开始-->
    <!--事务模板 -->
    <bean id="transactionTemplate"
          class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager"/>
    </bean>
    <!-- jdbc事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 -->
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.imm.dao"/>
        <property name="annotationClass" value="com.imm.dao.base.MyBatisRepository"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${driverClassName}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="root"/>
        <property name="password" value="123456"/>
        <property name="initialSize" value="${initialSize}"/>
        <property name="maxTotal" value="${maxActive}"/>
        <property name="maxIdle" value="${maxIdle}"/>
        <property name="minIdle" value="${minIdle}"/>
    </bean>

    <!--持久化结束-->
    <!-- Velocity配置开始-->
    <!-- 配置Velocity视图解析器 -->
    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.velocity.VelocityView"/>
        <property name="contentType">
            <value>text/html;charset=UTF-8</value>
        </property>
    </bean>
    <!-- 配置Velocity引擎 -->
    <bean id="velocityCongfig"
          class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath">
            <value>/</value>
        </property>
        <property name="velocityProperties">
            <props>
                <prop key="input.encoding">UTF-8</prop>
                <prop key="output.encoding ">UTF-8</prop>
            </props>
        </property>
    </bean>
    <bean id="velocityEngine"
          class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
        <property name="resourceLoaderPath" value="/admin"/>
    </bean>
    <!-- Velocity配置结束-->

    <!-- 将session放入redis -->
    <!--<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>

    <bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis-server}"/>
        <property name="password" value=""/>
        <property name="port" value="6379"/>
        <property name="database" value="10"/>
    </bean>-->


    <!--下是mq配置-->

    <task:executor id="amqpConnectionTaskExecutor" pool-size="${mq_poolsize}" />

    <!-- queue litener 观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象 -->
    <!-- <rabbit:annotation-driven /> -->

    <!-- rabbit 连接工厂-->
    <!--<rabbit:connection-factory
            id="connectionFactory"
            addresses="${mq_host}"
            virtual-host="${mq_vhost}"
            username="${mq_username}"
            password="${mq_userpassword}"
            thread-factory="threadFactory"
            channel-cache-size="60"
            executor="amqpConnectionTaskExecutor"
    />
    &lt;!&ndash; 定义线程的名字 &ndash;&gt;
    <bean id="threadFactory" class="org.springframework.scheduling.concurrent.CustomizableThreadFactory">
        <constructor-arg value="rabbitmq-" />
    </bean>

    <rabbit:topic-exchange name="${exchange-from-core-server}" auto-declare="true" >
        <rabbit:bindings>
            <rabbit:binding queue="${queue-from-core-server}" pattern="1111111111"/>
        </rabbit:bindings>
    </rabbit:topic-exchange>


    &lt;!&ndash;定义rabbit template用于数据的接收和发送 &ndash;&gt;
    <rabbit:template id="amqpTemplate"
                     connection-factory="connectionFactory"
                     retry-template="retryTemplate"
    />

    &lt;!&ndash;通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成 &ndash;&gt;
    <rabbit:admin connection-factory="connectionFactory" />

    &lt;!&ndash;定义queue &ndash;&gt;
    <rabbit:queue name="${queue-from-core-server}" durable="true" auto-delete="false" exclusive="false" />


    &lt;!&ndash; queue litener  观察 监听模式 当有消息到达时会通知监听在对应的队列上的监听对象&ndash;&gt;
    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener queue-names="${queue-from-core-server}" ref="receiverFromCoreServer" method="onMessage"/>
    </rabbit:listener-container>


    <bean id="fixedBackOff" class="org.springframework.util.backoff.FixedBackOff">
        <property name="maxAttempts" value="3"/>
        <property name="interval" value="3000"/>
    </bean>
    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        &lt;!&ndash; 让步策略 &ndash;&gt;
        <property name="backOffPolicy">
            &lt;!&ndash; 这里的策略就是,时间逐步增长 &ndash;&gt;
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                &lt;!&ndash; 初始区间 &ndash;&gt;
                <property name="initialInterval" value="500" />
                &lt;!&ndash; 倍数 &ndash;&gt;
                <property name="multiplier" value="10.0" />
                &lt;!&ndash; 最大间隔 &ndash;&gt;
                <property name="maxInterval" value="10000" />
            </bean>
        </property>
        &lt;!&ndash; 重试策略 &ndash;&gt;
        <property name="retryPolicy" >
            <bean class="org.springframework.retry.policy.SimpleRetryPolicy">
                &lt;!&ndash; 最大次数 &ndash;&gt;
                <property name="maxAttempts" value="3"/>
            </bean>
        </property>
    </bean>-->
    <!--mq配置结束-->
</beans>